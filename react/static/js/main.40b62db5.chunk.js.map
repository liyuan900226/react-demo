{"version":3,"sources":["components/tabBar/tab.module.scss","utils/tool.js","mock/index.js","components/tabBar/index.jsx","components/time/index.jsx","components/noneState/index.js","api/request.js","api/index.js","pages/home/router.js","pages/home/index.jsx","pages/home/homeDetail/homeDetail.jsx","pages/redux/index.jsx","pages/redux/router.js","redux/actions.js","redux/action-types.js","pages/my/router.js","pages/my/index.jsx","pages/register/router.js","pages/register/index.jsx","pages/login/router.js","pages/login/login.jsx","router/index.js","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","window","utils","Random","Mock","data","i","template","boolean","natural","integer","float","character","string","range","date","image","size","color","paragraph","name","url","province","push","mock","Index","props","state","className","css","tab_bar","to","activeClassName","active","Component","this","time","onClick","change","changeTime","defaultProps","axios","interceptors","request","use","config","error","Promise","reject","response","console","log","methods","params","toLowerCase","get","post","changeUserR","petId","routes","path","components","Date","toISOString","slice","num","form","year","handleChange","bind","goQuery","goParams","id","changeName","value","onChange","e","numChange","type","price","allPriceChange","status","add","history","setState","document","getElementById","innerHTML","target","exact","match","edit","changeUser","JSON","stringify","user","username","connect","userList","dispatch","a","login","Login","HomeRouter","MessageRouter","MyRouter","RegisterRouter","initUser","msg","initUserList","combineReducers","action","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","require","ReactDOM","render","store","StrictMode","map","item","key","component"],"mappings":"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","file":"static/js/main.40b62db5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tab_bar\":\"tab_tab_bar__1F9iB\",\"active\":\"tab_active__1ZCVc\"};","(function (window) {\n    window.utils = {\n\n    }\n})(window)\n","import Mock from 'mockjs' // 引入mockjs\nconst Random = Mock.Random // Mock.Random 是一个工具类，用于生成各种随机数据\n\nlet data = [] // 用于接受生成数据的数组\nlet size = [\n    '300x250', '250x250', '240x400', '336x280',\n    '180x150', '720x300', '468x60', '234x60',\n    '88x31', '120x90', '120x60', '120x240',\n    '125x125', '728x90', '160x600', '120x600',\n    '300x600'\n] // 定义随机值\nfor(let i = 0; i < 10; i ++) { // 可自定义生成的个数\n    let template = {\n        'Boolean': Random.boolean, // 可以生成基本数据类型\n        'Natural': Random.natural(1, 10), // 生成1到100之间自然数\n        'Integer': Random.integer(1, 100), // 生成1到100之间的整数\n        'Float': Random.float(0, 100, 0, 5), // 生成0到100之间的浮点数,小数点后尾数为0到5位\n        'Character': Random.character(), // 生成随机字符串,可加参数定义规则\n        'String': Random.string(2, 10), // 生成2到10个字符之间的字符串\n        'Range': Random.range(0, 10, 2), // 生成一个随机数组\n        'Date': Random.date(), // 生成一个随机日期,可加参数定义日期格式\n        'Image': Random.image(Random.size, '#02adea', 'Hello'), // Random.size表示将从size数据中任选一个数据\n        'Color': Random.color(), // 生成一个颜色随机值\n        'Paragraph':Random.paragraph(2, 5), //生成2至5个句子的文本\n        'Name': Random.name(), // 生成姓名\n        'Url': Random.url(), // 生成web地址\n        'Address': Random.province() // 生成地址\n    }\n    data.push(template)\n}\n\n// 根据数据模板生成模拟数据\nMock.mock('/data/index', 'get', data)\nMock.mock('/data/index2', 'post', data)\n","import React, {Component} from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport css from './tab.module.scss'\nclass Index extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: 1\n        }\n    }\n    render() {\n        return (\n            <div className={css.tab_bar}>\n                <NavLink to='/home' activeClassName={css.active}>首页</NavLink>\n                <NavLink to='/redux' activeClassName={css.active}>redux</NavLink>\n                <NavLink to='/register' activeClassName={css.active}>登记</NavLink>\n                <NavLink to='/my' activeClassName={css.active}>我的</NavLink>\n            </div>\n        );\n    }\n}\nexport default Index;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Index extends Component {\n    //如果没有传递该属性时的默认值\n    static defaultProps = {\n        time: '默认props：2020-01-01'\n    }\n    //如果传递该属性，该属性值必须为字符串\n    static propTypes={\n        time: PropTypes.string.isRequired // 如果类型不对会有警告！\n    }\n    render() {\n        return (\n            <div>\n                <p>time组件prop传值：{ this.props.time }</p>\n                <button onClick={() => this.change()}>time组件内的自定义事件</button>\n            </div>\n        );\n    }\n\n    change() {\n        this.props.changeTime('2020-12-31')\n    }\n}\n\nexport default Index;\n","import React from 'react'  // 创建组件、虚拟DOM元素、生命周期\nexport default function (props) {\n    return (\n        <div>\n            无状态组件：{props.name}\n        </div>\n    )\n}\n","import axios from 'axios'\n\n// 拦截器在请求或响应被 then 或 catch 处理前拦截它们。\n\n// 添加请求拦截器\naxios.interceptors.request.use(function (config) {\n    // 在发送请求之前做些什么\n    // config.headers['auth-token'] = localStorage.getItem('auth-token');\n    // config.headers.key = '123'\n    return config;\n}, function (error) {\n    // 对请求错误做些什么\n    return Promise.reject(error);\n});\n\n// 添加响应拦截器\naxios.interceptors.response.use(function (response) {\n    console.log(response)\n    // 对响应数据做点什么\n    // 处理httpStatus 200 及非 200\n    return response;\n}, function (error) {\n    // 对响应错误做点什么\n    return Promise.reject(error);\n});\n\n\nfunction request(methods, url, params) {\n    url = 'http://127.0.0.1:4523/mock/349129' + url\n    if(methods.toLowerCase() === 'get') {\n        return axios.get(url, {\n            params: params || {}\n        })\n    }else if(methods.toLowerCase() === 'post') {\n        return axios.post(url, params || {})\n    }\n}\n\nexport default request\n","/**\n * 包含了n个接口请求的函数的模块\n * 函数返回值为: promise\n */\nimport request from './request'\n\n// 查询详情\nexport const changeUserR = ({petId}) => request('get', '/pet/', {petId})\n// 新增\nexport const add = ({name, status}) => request('post','/pet',{name, status})\n\n","import Index from './index'\nimport HomeDetail from './homeDetail/homeDetail'\nconst routes = [\n    {\n        path: '/home',\n        components: Index,\n        exact: true\n    },{\n        path: '/homeDetail/:id/:name',\n        components: HomeDetail,\n        exact: true\n    },\n\n]\nexport default routes;\n","import React, {Component} from 'react';\nimport {Link } from 'react-router-dom'\n\n// tabBar组件\nimport TabBar from '@/components/tabBar'\n\n// time组件，用来测试组件特性，插槽特性尚未学习\nimport Time from '@/components/time'\n\n// 引入无状态组件\nimport NoneState from '@/components/noneState'\n\n\n\n\nimport { add } from '@/api'\n\nclass Index extends Component {\n    constructor(props) {\n        super(props)\n        // state 声明在 constructor 方法内和外面并无区别\n        this.state = {\n            time: new Date().toISOString().slice(0, 10),\n            num: 14,\n            form: {\n                name: '测试',\n                year: '2020'\n            },\n        }\n\n        // 通过bind 修改this指向\n        this.handleChange = this.handleChange.bind(this);\n\n\n    }\n    render() {\n        return (\n            <div>\n                首页\n                <div>\n                    <button onClick={() => this.goQuery()}>跳转详情 query传参</button>\n                    <button onClick={() => this.goParams()}>跳转详情 params传参</button>\n                    <p>\n                        <Link to=\"/homeDetail/1/zhangsan\">路由链接 \"Link\" 跳转</Link>\n                    </p>\n\n                    {/*state  */}\n                    <p id=\"name\">姓名：{ this.state.form.name } <button onClick={ () => {this.changeName()} }>修改名字</button></p>\n\n                    {/*组件传值*/}\n                    <Time changeTime={(value) => this.changeTime(value)} time={ this.state.time } />\n\n                    {/*表单*/}\n                    <p>\n                        数量: <input value={this.state.num} onChange={(e) => this.numChange(e)} type=\"text\"/>\n                    </p>\n                    <p>计算出总价：<input value={this.price} onChange={(e) => this.allPriceChange(e)} type=\"text\"/></p>\n\n                    {/*无状态组件*/}\n                    <NoneState name='11' />\n\n                </div>\n                <TabBar/>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        add({name: 'ok', status: '1'})\n    }\n\n    handleChange() {\n\n    }\n\n    goQuery() {\n        /**\n         * query 传参；接收方式 this.props.location.query\n         * this.props.history.push({pathname: '/homeDetail', query: {name: 'query参数'}})\n         */\n\n    }\n\n    goParams() {\n        // params 传参\n        this.props.history.push('/homeDetail/1/zhangsan')\n    }\n\n    // 组件的子传父事件\n    changeTime(value) {\n        console.log(value)\n        this.setState({\n            time: value\n        })\n        console.log('触发了自定义事件')\n    }\n\n\n    changeName() {\n        /**\n         * setState 只会把对应的状态更新，而不会覆盖其他的状态\n         * 这个方法是异步的, setState 方法第二个参数是回调，也可以用 async await 来实现\n         * 如果 state 是一个复杂对象，则需要使用三点运算符，三点运算符后面的属性之会覆盖前面的\n         */\n        this.setState({\n            ...this.state,\n            num: 15,  // 修改 state 的第一层\n            form: {\n                ...this.state.form,\n                name: '李四'  // 修改 state 的第二层\n            }\n        }, () => console.log(document.getElementById('name').innerHTML))\n        console.log(document.getElementById('name').innerHTML)\n    }\n\n    numChange(e) {\n        console.log(e.target.value)\n        this.setState({\n            num: e.target.value\n        })\n    }\n    allPriceChange(e) {\n        console.log(e.target.value)\n        this.setState({\n            num: e.target.value / 10\n        })\n    }\n\n    /**\n     * 计算属性，通过es6的get、set实现\n     * 在类里面可以去定义一些getter和setter，getter可以得到一些东西的方法，setter可以设置东西\n     */\n    get price() {\n        return this.state.num * 10\n    }\n\n}\n\nexport default Index;\n","import React, {Component} from 'react';\n\nclass HomeDetail extends Component {\n    render() {\n        return (\n            <div>\n                homeDetail\n            </div>\n        );\n    }\n    componentDidMount() {\n        // query传参\n        // console.log(this.props.location.query)\n\n        // params传参 在url里面刷新不会丢失\n        const { name, id } = this.props.match.params\n        console.log(id,name)\n    }\n}\n\nexport default HomeDetail;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n// tabBar组件\nimport TabBar from '@/components/tabBar'\n\n// action-creator\nimport { edit, changeUser } from '../../redux/actions'\nimport { connect } from 'react-redux'\n\n\nclass Index extends Component {\n\n    //如果没有传递该属性时的默认值\n    // static defaultProps = {\n    //     name: 'stranger'\n    // }\n    //如果传递该属性，该属性值必须为字符串\n    static propTypes={\n        edit:PropTypes.func.isRequired,\n        user:PropTypes.object.isRequired\n    }\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            // ...store.getState()\n        }\n\n        // 修改状态\n        this.props.edit('张三2')\n    }\n\n    render() {\n        return (\n            <div>\n                redux\n                <p onClick={() => this.props.changeUser({petId: 1}) }>异步action</p>\n                <p>无需订阅的state：{JSON.stringify(this.props.user.username)}</p>\n\n                <TabBar/>\n            </div>\n        );\n    }\n}\n// 第一个参数返回的对象会被合并到props里面\n/**\n * @params: mapStateToProps<Function>、mapDispatchToProps<Function>\n *\n *     mapStateToProps: 将store中的state映射到props中去\n *     该方法返回对象（包含store中的user数据）将会和组件的 props 合并，\n *     store中的user发生变化都会重新触发该方法并和 props 合并\n *\n *     mapDispatchToProps: 将store中的dispatch映射到props中去\n *     该对象将会被合并到props中，通过this.props.[action-creator]() 即可调用dispatch该action\n */\nexport default connect(\n    /**\n     * @这里如果写成 state => state , 则会将store中所有的状态都引入到该页面，\n     * 这样store中任意状态发生改变时都会重新渲染这个页面；\n     * 按需引入则只有该引入的状态变化时才会重新渲染该组件。\n     */\n    state => ({user: state.user,userList: state.userList}),\n    {edit, changeUser}\n)(Index);\n","import Index from './index'\nconst routes = [\n    {\n        path: '/redux',\n        components: Index,\n        exact: true\n    }\n]\nexport default routes;\n","import * as actionTypes from \"./action-types\";\nimport { changeUserR } from '@/api'\n/**\n * action-creator 方法生成action\n * 包含异步的和同步的\n */\nconst change = (username) => ({type: actionTypes.CHANGE_USER, username})\n\n// 同步action,\nexport const edit = (username) => ({type: actionTypes.SET_USER, username})\n\n\n// 异步action，依赖中间件redux-thunk 需要先请求接口，然后在执行dispatch\nexport const changeUser = (params) => {\n    return async dispatch => {\n        await changeUserR(params)\n        dispatch(change('异步action：res'))\n    }\n}\n","/**\n *包含n个action type名称常量，这样写是为了防止在写action type的时候写错\n */\n\nexport const SET_USER = 'set_user'\nexport const CHANGE_USER = 'change_user'\n\n\n","import Index from './index'\nconst routes = [\n    {\n        path: '/my',\n        components: Index,\n        exact: true\n    }\n]\nexport default routes;\n","import React, {Component} from 'react';\n// tabBar组件\nimport TabBar from '@/components/tabBar'\n\nclass Index extends Component {\n    render() {\n        return (\n            <div>\n                我的\n                <TabBar/>\n            </div>\n        );\n    }\n}\n\nexport default Index;\n","import Index from './index'\nconst routes = [\n    {\n        path: '/register',\n        components: Index,\n        exact: true\n    }\n]\nexport default routes;\n","import React, {Component} from 'react';\n// tabBar组件\nimport TabBar from '@/components/tabBar'\n\nclass Index extends Component {\n    render() {\n        return (\n            <div>\n                登记\n                <TabBar/>\n            </div>\n        );\n    }\n}\n\nexport default Index;\n","import Login from './login'\nconst routes = [\n    {\n        path: '/login',\n        components: Login,\n        exact: true\n    },\n\n]\nexport default routes;\n","import React, {Component} from 'react';\n\nclass Login extends Component {\n    render() {\n        return (\n            <div>\n                <p onClick={() => this.login()}>登录页</p>\n            </div>\n        );\n    }\n\n    login() {\n        this.props.history.push('/home')\n    }\n}\n\nexport default Login;\n","// 导入路由模块\nimport HomeRouter from '@/pages/home/router'\nimport MessageRouter from '@/pages/redux/router'\nimport MyRouter from '@/pages/my/router'\nimport RegisterRouter from '@/pages/register/router'\nimport Login from '@/pages/login/router'\n\nexport default [ ...Login, ...HomeRouter, ...MessageRouter, ...MyRouter, ...RegisterRouter, ...Login];\n","import { SET_USER, CHANGE_USER } from './action-types'\n\n\n/**\n *包含n个reducer函数: 根据老的state和指定的action返回一个新的state\n * reducer必须是一个纯函数，返回结果完全由传入参数决定，例如里面由ajax或者时间就不行！！！！！！！！！\n *\n * 因为redux把reducer设计成只负责这个作用，所以reducer的职责不允许有副作用，\n * 副作用简单来说就是不确定性，如果reducer有副作用，那么返回的state就不确定。\n */\nimport {combineReducers} from 'redux'\n\n\n// redux中的state是不能直接修改的，只能通过action来修改，相当于我们在单例中定义setter方法。\nconst initUser = {\n    username: '', // 用户名\n    msg: '', // 错误提示信息\n}\n// 传入初始化的user数据\nfunction user(state=initUser, action) {\n    /**\n     * reducer里面只能接收state，不能改变state，也可以使用深拷贝来进行修改\n     * let newState = JSON.parse(JSON.stringfy(state)) !!!!!!!!!!  (Object.assign() 不是深拷贝，貌似内层的不会深拷贝)\n     * 返回一个新的state\n     */\n    console.log('action')\n    console.log(action)\n    switch (action.type) {\n        case SET_USER: // 设置用户\n            return {...state, username: action.username}\n        case CHANGE_USER: // 清除用户\n            return {...state, username: action.username}\n        default:\n            return state\n    }\n}\n\n\nconst initUserList = []\n// 产生userlist状态的reducer\nfunction userList(state=initUserList, action) {\n    switch (action.type) {\n        case 'RECEIVE_USER_LIST':  // data为userList\n            return action.data\n        case 'RECEIVE_USER_LISTS':  // data为userList\n            return action.data\n        default:\n            return state\n    }\n}\n\nexport default combineReducers({\n    user,\n    userList\n})\n// 向外暴露的状态的结构: {user: {}, userList: []}\n\n","import {createStore, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport reducers from './reducers'\n\n/**\n * createStore只接收两个参数\n * 配置 redux 中间件\n */\nexport default createStore(reducers, composeWithDevTools(applyMiddleware(thunk)))\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport routes from './router'\n\n// react-redux\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n// import * as serviceWorker from './serviceWorker';\n\n// 全局样式、全局变量及方法\nimport './assets/scss/base.scss'\nimport './utils/tool'\n\n// mock\nrequire('./mock')\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <HashRouter>\n                <Switch>\n                    {\n                        routes.map((item,key)=> {\n                            if(item.exact) {\n                                return <Route key={key} exact path={item.path} component={item.components}/>\n                            }else {\n                                return <Route key={key} path={item.path} component={item.components}/>\n                            }\n                        })\n                    }\n                    {/*如果都没有匹配到，重定向*/}\n                    <Redirect to='/login' />\n                </Switch>\n            </HashRouter>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}